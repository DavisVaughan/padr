
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "padr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('padr')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("fill_by_function")
> ### * fill_by_function
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fill_by_function
> ### Title: Fill missing values by a function of the nonmissings.
> ### Aliases: fill_by_function
> 
> ### ** Examples
> 
> library(dplyr) # for the pipe operator

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> x <- seq(as.Date('2016-01-01'), by = 'day', length.out = 366)
> x <- x[sample(1:366, 200)] %>% sort
> x_df <- data_frame(x  = x,
+                    y1 = runif(200, 10, 20) %>% round,
+                    y2 = runif(200, 1, 50) %>% round)
> x_df %>% pad %>% fill_by_function(y1, y2)
# A tibble: 363 × 3
            x    y1    y2
       <date> <dbl> <dbl>
1  2016-01-04 13.00 33.00
2  2016-01-05 12.00 10.00
3  2016-01-06 14.72 26.47
4  2016-01-07 14.72 26.47
5  2016-01-08 15.00 48.00
6  2016-01-09 13.00 45.00
7  2016-01-10 14.72 26.47
8  2016-01-11 14.72 26.47
9  2016-01-12 14.72 26.47
10 2016-01-13 12.00 47.00
# ... with 353 more rows
> x_df %>% pad %>% fill_by_function(y1, y2, fun = median)
# A tibble: 363 × 3
            x    y1    y2
       <date> <dbl> <dbl>
1  2016-01-04    13    33
2  2016-01-05    12    10
3  2016-01-06    14    26
4  2016-01-07    14    26
5  2016-01-08    15    48
6  2016-01-09    13    45
7  2016-01-10    14    26
8  2016-01-11    14    26
9  2016-01-12    14    26
10 2016-01-13    12    47
# ... with 353 more rows
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("fill_by_prevalent")
> ### * fill_by_prevalent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fill_by_prevalent
> ### Title: Fill missing values by the most prevalent nonnmissing value.
> ### Aliases: fill_by_prevalent
> 
> ### ** Examples
> 
> library(dplyr) # for the pipe operator

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> x <- seq(as.Date('2016-01-01'), by = 'day', length.out = 366)
> x <- x[sample(1:366, 200)] %>% sort
> x_df <- data_frame(x  = x,
+                   y1 = rep(letters[1:3], c(80, 70, 50)) %>% sample,
+                   y2 = rep(letters[2:5], c(60, 80, 40, 20)) %>% sample)
> x_df %>% pad %>% fill_by_prevalent(y1, y2)
# A tibble: 363 × 3
            x    y1    y2
       <date> <chr> <chr>
1  2016-01-04     a     c
2  2016-01-05     a     b
3  2016-01-06     a     c
4  2016-01-07     a     c
5  2016-01-08     b     e
6  2016-01-09     a     d
7  2016-01-10     a     c
8  2016-01-11     a     c
9  2016-01-12     a     c
10 2016-01-13     a     e
# ... with 353 more rows
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("fill_by_value")
> ### * fill_by_value
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fill_by_value
> ### Title: Fill missing values by a single value.
> ### Aliases: fill_by_value
> 
> ### ** Examples
> 
> library(dplyr) # for the pipe operator

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> x <- seq(as.Date('2016-01-01'), by = 'day', length.out = 366)
> x <- x[sample(1:366, 200)] %>% sort
> x_df <- data_frame(x  = x,
+                    y1 = runif(200, 10, 20) %>% round,
+                    y2 = runif(200, 1, 50) %>% round,
+                    y3 = runif(200, 20, 40) %>% round,
+                    y4 = sample(letters[1:5], 200, replace = TRUE))
> x_padded <- x_df %>% pad
> x_padded %>% fill_by_value(y1)
# A tibble: 363 × 5
            x    y1    y2    y3    y4
       <date> <dbl> <dbl> <dbl> <chr>
1  2016-01-04    13    33    36     e
2  2016-01-05    12    10    39     a
3  2016-01-06     0    NA    NA  <NA>
4  2016-01-07     0    NA    NA  <NA>
5  2016-01-08    15    48    23     e
6  2016-01-09    13    45    35     d
7  2016-01-10     0    NA    NA  <NA>
8  2016-01-11     0    NA    NA  <NA>
9  2016-01-12     0    NA    NA  <NA>
10 2016-01-13    12    47    40     b
# ... with 353 more rows
> x_df %>% pad %>% fill_by_value(y1, y2, value = 42)
# A tibble: 363 × 5
            x    y1    y2    y3    y4
       <date> <dbl> <dbl> <dbl> <chr>
1  2016-01-04    13    33    36     e
2  2016-01-05    12    10    39     a
3  2016-01-06    42    42    NA  <NA>
4  2016-01-07    42    42    NA  <NA>
5  2016-01-08    15    48    23     e
6  2016-01-09    13    45    35     d
7  2016-01-10    42    42    NA  <NA>
8  2016-01-11    42    42    NA  <NA>
9  2016-01-12    42    42    NA  <NA>
10 2016-01-13    12    47    40     b
# ... with 353 more rows
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("get_interval")
> ### * get_interval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_interval
> ### Title: Get the interval of a datetime variable.
> ### Aliases: get_interval
> 
> ### ** Examples
> 
> x_month <- seq(as.Date('2016-01-01'), as.Date('2016-05-01'), by = 'month')
> get_interval(x_month)
[1] "month"
> 
> x_sec <- seq(as.POSIXct('2016-01-01 00:00:00'), length.out = 100, by = 'sec')
> get_interval(x_sec)
[1] "sec"
> 
> 
> 
> cleanEx()
> nameEx("pad")
> ### * pad
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pad
> ### Title: Pad the datetime column of a data frame.
> ### Aliases: pad
> 
> ### ** Examples
> 
> simple_df <- data.frame(day = as.Date(c('2016-04-01', '2016-04-03')),
+                         some_value = c(3,4))
> pad(simple_df)
         day some_value
1 2016-04-01          3
2 2016-04-02         NA
3 2016-04-03          4
> 
> library(dplyr) # for the pipe operator

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> month <- seq(as.Date('2016-04-01'), as.Date('2017-04-01'),
+               by = 'month')[c(1, 4, 5, 7, 9, 10, 13)]
> month_df <- data.frame(month = month,
+                        y = runif(length(month), 10, 20) %>% round)
> # forward fill the padded values with tidyr's fill
> month_df %>% pad %>% tidyr::fill(y)
        month  y
1  2016-04-01 13
2  2016-05-01 13
3  2016-06-01 13
4  2016-07-01 14
5  2016-08-01 16
6  2016-09-01 16
7  2016-10-01 19
8  2016-11-01 19
9  2016-12-01 12
10 2017-01-01 19
11 2017-02-01 19
12 2017-03-01 19
13 2017-04-01 19
> 
> # or fill all y with 0
> month_df %>% pad %>% fill_by_value(y)
        month  y
1  2016-04-01 13
2  2016-05-01  0
3  2016-06-01  0
4  2016-07-01 14
5  2016-08-01 16
6  2016-09-01  0
7  2016-10-01 19
8  2016-11-01  0
9  2016-12-01 12
10 2017-01-01 19
11 2017-02-01  0
12 2017-03-01  0
13 2017-04-01 19
> 
> # padding a data.frame on group level
> day_var <- seq(as.Date('2016-01-01'), length.out = 12, by = 'month')
> x_df_grp <- data.frame(grp  = rep(LETTERS[1:3], each =4),
+                        y    = runif(12, 10, 20) %>% round(0),
+                        date = sample(day_var, 12, TRUE)) %>%
+  arrange(grp, date)
> 
> x_df_grp %>% group_by(grp) %>% do(pad(.)) %>% ungroup %>%
+ tidyr::fill(grp)
# A tibble: 23 × 3
         date    grp     y
       <date> <fctr> <dbl>
1  2016-03-01      A    11
2  2016-04-01      A    NA
3  2016-05-01      A    NA
4  2016-06-01      A    NA
5  2016-07-01      A    NA
6  2016-08-01      A    12
7  2016-09-01      A    NA
8  2016-10-01      A    17
9  2016-11-01      A    NA
10 2016-12-01      A    16
# ... with 13 more rows
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("thicken")
> ### * thicken
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: thicken
> ### Title: Add a variable of a higher interval to a data frame.
> ### Aliases: thicken
> 
> ### ** Examples
> 
> x_hour <- seq(lubridate::ymd_hms('20160302 000000'), by = 'hour',
+               length.out = 200)
> some_df <- data.frame(x_hour = x_hour)
> thicken(some_df)
                 x_hour x_hour_day
1   2016-03-02 00:00:00 2016-03-02
2   2016-03-02 01:00:00 2016-03-02
3   2016-03-02 02:00:00 2016-03-02
4   2016-03-02 03:00:00 2016-03-02
5   2016-03-02 04:00:00 2016-03-02
6   2016-03-02 05:00:00 2016-03-02
7   2016-03-02 06:00:00 2016-03-02
8   2016-03-02 07:00:00 2016-03-02
9   2016-03-02 08:00:00 2016-03-02
10  2016-03-02 09:00:00 2016-03-02
11  2016-03-02 10:00:00 2016-03-02
12  2016-03-02 11:00:00 2016-03-02
13  2016-03-02 12:00:00 2016-03-02
14  2016-03-02 13:00:00 2016-03-02
15  2016-03-02 14:00:00 2016-03-02
16  2016-03-02 15:00:00 2016-03-02
17  2016-03-02 16:00:00 2016-03-02
18  2016-03-02 17:00:00 2016-03-02
19  2016-03-02 18:00:00 2016-03-02
20  2016-03-02 19:00:00 2016-03-02
21  2016-03-02 20:00:00 2016-03-02
22  2016-03-02 21:00:00 2016-03-02
23  2016-03-02 22:00:00 2016-03-02
24  2016-03-02 23:00:00 2016-03-02
25  2016-03-03 00:00:00 2016-03-03
26  2016-03-03 01:00:00 2016-03-03
27  2016-03-03 02:00:00 2016-03-03
28  2016-03-03 03:00:00 2016-03-03
29  2016-03-03 04:00:00 2016-03-03
30  2016-03-03 05:00:00 2016-03-03
31  2016-03-03 06:00:00 2016-03-03
32  2016-03-03 07:00:00 2016-03-03
33  2016-03-03 08:00:00 2016-03-03
34  2016-03-03 09:00:00 2016-03-03
35  2016-03-03 10:00:00 2016-03-03
36  2016-03-03 11:00:00 2016-03-03
37  2016-03-03 12:00:00 2016-03-03
38  2016-03-03 13:00:00 2016-03-03
39  2016-03-03 14:00:00 2016-03-03
40  2016-03-03 15:00:00 2016-03-03
41  2016-03-03 16:00:00 2016-03-03
42  2016-03-03 17:00:00 2016-03-03
43  2016-03-03 18:00:00 2016-03-03
44  2016-03-03 19:00:00 2016-03-03
45  2016-03-03 20:00:00 2016-03-03
46  2016-03-03 21:00:00 2016-03-03
47  2016-03-03 22:00:00 2016-03-03
48  2016-03-03 23:00:00 2016-03-03
49  2016-03-04 00:00:00 2016-03-04
50  2016-03-04 01:00:00 2016-03-04
51  2016-03-04 02:00:00 2016-03-04
52  2016-03-04 03:00:00 2016-03-04
53  2016-03-04 04:00:00 2016-03-04
54  2016-03-04 05:00:00 2016-03-04
55  2016-03-04 06:00:00 2016-03-04
56  2016-03-04 07:00:00 2016-03-04
57  2016-03-04 08:00:00 2016-03-04
58  2016-03-04 09:00:00 2016-03-04
59  2016-03-04 10:00:00 2016-03-04
60  2016-03-04 11:00:00 2016-03-04
61  2016-03-04 12:00:00 2016-03-04
62  2016-03-04 13:00:00 2016-03-04
63  2016-03-04 14:00:00 2016-03-04
64  2016-03-04 15:00:00 2016-03-04
65  2016-03-04 16:00:00 2016-03-04
66  2016-03-04 17:00:00 2016-03-04
67  2016-03-04 18:00:00 2016-03-04
68  2016-03-04 19:00:00 2016-03-04
69  2016-03-04 20:00:00 2016-03-04
70  2016-03-04 21:00:00 2016-03-04
71  2016-03-04 22:00:00 2016-03-04
72  2016-03-04 23:00:00 2016-03-04
73  2016-03-05 00:00:00 2016-03-05
74  2016-03-05 01:00:00 2016-03-05
75  2016-03-05 02:00:00 2016-03-05
76  2016-03-05 03:00:00 2016-03-05
77  2016-03-05 04:00:00 2016-03-05
78  2016-03-05 05:00:00 2016-03-05
79  2016-03-05 06:00:00 2016-03-05
80  2016-03-05 07:00:00 2016-03-05
81  2016-03-05 08:00:00 2016-03-05
82  2016-03-05 09:00:00 2016-03-05
83  2016-03-05 10:00:00 2016-03-05
84  2016-03-05 11:00:00 2016-03-05
85  2016-03-05 12:00:00 2016-03-05
86  2016-03-05 13:00:00 2016-03-05
87  2016-03-05 14:00:00 2016-03-05
88  2016-03-05 15:00:00 2016-03-05
89  2016-03-05 16:00:00 2016-03-05
90  2016-03-05 17:00:00 2016-03-05
91  2016-03-05 18:00:00 2016-03-05
92  2016-03-05 19:00:00 2016-03-05
93  2016-03-05 20:00:00 2016-03-05
94  2016-03-05 21:00:00 2016-03-05
95  2016-03-05 22:00:00 2016-03-05
96  2016-03-05 23:00:00 2016-03-05
97  2016-03-06 00:00:00 2016-03-06
98  2016-03-06 01:00:00 2016-03-06
99  2016-03-06 02:00:00 2016-03-06
100 2016-03-06 03:00:00 2016-03-06
101 2016-03-06 04:00:00 2016-03-06
102 2016-03-06 05:00:00 2016-03-06
103 2016-03-06 06:00:00 2016-03-06
104 2016-03-06 07:00:00 2016-03-06
105 2016-03-06 08:00:00 2016-03-06
106 2016-03-06 09:00:00 2016-03-06
107 2016-03-06 10:00:00 2016-03-06
108 2016-03-06 11:00:00 2016-03-06
109 2016-03-06 12:00:00 2016-03-06
110 2016-03-06 13:00:00 2016-03-06
111 2016-03-06 14:00:00 2016-03-06
112 2016-03-06 15:00:00 2016-03-06
113 2016-03-06 16:00:00 2016-03-06
114 2016-03-06 17:00:00 2016-03-06
115 2016-03-06 18:00:00 2016-03-06
116 2016-03-06 19:00:00 2016-03-06
117 2016-03-06 20:00:00 2016-03-06
118 2016-03-06 21:00:00 2016-03-06
119 2016-03-06 22:00:00 2016-03-06
120 2016-03-06 23:00:00 2016-03-06
121 2016-03-07 00:00:00 2016-03-07
122 2016-03-07 01:00:00 2016-03-07
123 2016-03-07 02:00:00 2016-03-07
124 2016-03-07 03:00:00 2016-03-07
125 2016-03-07 04:00:00 2016-03-07
126 2016-03-07 05:00:00 2016-03-07
127 2016-03-07 06:00:00 2016-03-07
128 2016-03-07 07:00:00 2016-03-07
129 2016-03-07 08:00:00 2016-03-07
130 2016-03-07 09:00:00 2016-03-07
131 2016-03-07 10:00:00 2016-03-07
132 2016-03-07 11:00:00 2016-03-07
133 2016-03-07 12:00:00 2016-03-07
134 2016-03-07 13:00:00 2016-03-07
135 2016-03-07 14:00:00 2016-03-07
136 2016-03-07 15:00:00 2016-03-07
137 2016-03-07 16:00:00 2016-03-07
138 2016-03-07 17:00:00 2016-03-07
139 2016-03-07 18:00:00 2016-03-07
140 2016-03-07 19:00:00 2016-03-07
141 2016-03-07 20:00:00 2016-03-07
142 2016-03-07 21:00:00 2016-03-07
143 2016-03-07 22:00:00 2016-03-07
144 2016-03-07 23:00:00 2016-03-07
145 2016-03-08 00:00:00 2016-03-08
146 2016-03-08 01:00:00 2016-03-08
147 2016-03-08 02:00:00 2016-03-08
148 2016-03-08 03:00:00 2016-03-08
149 2016-03-08 04:00:00 2016-03-08
150 2016-03-08 05:00:00 2016-03-08
151 2016-03-08 06:00:00 2016-03-08
152 2016-03-08 07:00:00 2016-03-08
153 2016-03-08 08:00:00 2016-03-08
154 2016-03-08 09:00:00 2016-03-08
155 2016-03-08 10:00:00 2016-03-08
156 2016-03-08 11:00:00 2016-03-08
157 2016-03-08 12:00:00 2016-03-08
158 2016-03-08 13:00:00 2016-03-08
159 2016-03-08 14:00:00 2016-03-08
160 2016-03-08 15:00:00 2016-03-08
161 2016-03-08 16:00:00 2016-03-08
162 2016-03-08 17:00:00 2016-03-08
163 2016-03-08 18:00:00 2016-03-08
164 2016-03-08 19:00:00 2016-03-08
165 2016-03-08 20:00:00 2016-03-08
166 2016-03-08 21:00:00 2016-03-08
167 2016-03-08 22:00:00 2016-03-08
168 2016-03-08 23:00:00 2016-03-08
169 2016-03-09 00:00:00 2016-03-09
170 2016-03-09 01:00:00 2016-03-09
171 2016-03-09 02:00:00 2016-03-09
172 2016-03-09 03:00:00 2016-03-09
173 2016-03-09 04:00:00 2016-03-09
174 2016-03-09 05:00:00 2016-03-09
175 2016-03-09 06:00:00 2016-03-09
176 2016-03-09 07:00:00 2016-03-09
177 2016-03-09 08:00:00 2016-03-09
178 2016-03-09 09:00:00 2016-03-09
179 2016-03-09 10:00:00 2016-03-09
180 2016-03-09 11:00:00 2016-03-09
181 2016-03-09 12:00:00 2016-03-09
182 2016-03-09 13:00:00 2016-03-09
183 2016-03-09 14:00:00 2016-03-09
184 2016-03-09 15:00:00 2016-03-09
185 2016-03-09 16:00:00 2016-03-09
186 2016-03-09 17:00:00 2016-03-09
187 2016-03-09 18:00:00 2016-03-09
188 2016-03-09 19:00:00 2016-03-09
189 2016-03-09 20:00:00 2016-03-09
190 2016-03-09 21:00:00 2016-03-09
191 2016-03-09 22:00:00 2016-03-09
192 2016-03-09 23:00:00 2016-03-09
193 2016-03-10 00:00:00 2016-03-10
194 2016-03-10 01:00:00 2016-03-10
195 2016-03-10 02:00:00 2016-03-10
196 2016-03-10 03:00:00 2016-03-10
197 2016-03-10 04:00:00 2016-03-10
198 2016-03-10 05:00:00 2016-03-10
199 2016-03-10 06:00:00 2016-03-10
200 2016-03-10 07:00:00 2016-03-10
> thicken(some_df, 'month')
                 x_hour x_hour_month
1   2016-03-02 00:00:00   2016-03-01
2   2016-03-02 01:00:00   2016-03-01
3   2016-03-02 02:00:00   2016-03-01
4   2016-03-02 03:00:00   2016-03-01
5   2016-03-02 04:00:00   2016-03-01
6   2016-03-02 05:00:00   2016-03-01
7   2016-03-02 06:00:00   2016-03-01
8   2016-03-02 07:00:00   2016-03-01
9   2016-03-02 08:00:00   2016-03-01
10  2016-03-02 09:00:00   2016-03-01
11  2016-03-02 10:00:00   2016-03-01
12  2016-03-02 11:00:00   2016-03-01
13  2016-03-02 12:00:00   2016-03-01
14  2016-03-02 13:00:00   2016-03-01
15  2016-03-02 14:00:00   2016-03-01
16  2016-03-02 15:00:00   2016-03-01
17  2016-03-02 16:00:00   2016-03-01
18  2016-03-02 17:00:00   2016-03-01
19  2016-03-02 18:00:00   2016-03-01
20  2016-03-02 19:00:00   2016-03-01
21  2016-03-02 20:00:00   2016-03-01
22  2016-03-02 21:00:00   2016-03-01
23  2016-03-02 22:00:00   2016-03-01
24  2016-03-02 23:00:00   2016-03-01
25  2016-03-03 00:00:00   2016-03-01
26  2016-03-03 01:00:00   2016-03-01
27  2016-03-03 02:00:00   2016-03-01
28  2016-03-03 03:00:00   2016-03-01
29  2016-03-03 04:00:00   2016-03-01
30  2016-03-03 05:00:00   2016-03-01
31  2016-03-03 06:00:00   2016-03-01
32  2016-03-03 07:00:00   2016-03-01
33  2016-03-03 08:00:00   2016-03-01
34  2016-03-03 09:00:00   2016-03-01
35  2016-03-03 10:00:00   2016-03-01
36  2016-03-03 11:00:00   2016-03-01
37  2016-03-03 12:00:00   2016-03-01
38  2016-03-03 13:00:00   2016-03-01
39  2016-03-03 14:00:00   2016-03-01
40  2016-03-03 15:00:00   2016-03-01
41  2016-03-03 16:00:00   2016-03-01
42  2016-03-03 17:00:00   2016-03-01
43  2016-03-03 18:00:00   2016-03-01
44  2016-03-03 19:00:00   2016-03-01
45  2016-03-03 20:00:00   2016-03-01
46  2016-03-03 21:00:00   2016-03-01
47  2016-03-03 22:00:00   2016-03-01
48  2016-03-03 23:00:00   2016-03-01
49  2016-03-04 00:00:00   2016-03-01
50  2016-03-04 01:00:00   2016-03-01
51  2016-03-04 02:00:00   2016-03-01
52  2016-03-04 03:00:00   2016-03-01
53  2016-03-04 04:00:00   2016-03-01
54  2016-03-04 05:00:00   2016-03-01
55  2016-03-04 06:00:00   2016-03-01
56  2016-03-04 07:00:00   2016-03-01
57  2016-03-04 08:00:00   2016-03-01
58  2016-03-04 09:00:00   2016-03-01
59  2016-03-04 10:00:00   2016-03-01
60  2016-03-04 11:00:00   2016-03-01
61  2016-03-04 12:00:00   2016-03-01
62  2016-03-04 13:00:00   2016-03-01
63  2016-03-04 14:00:00   2016-03-01
64  2016-03-04 15:00:00   2016-03-01
65  2016-03-04 16:00:00   2016-03-01
66  2016-03-04 17:00:00   2016-03-01
67  2016-03-04 18:00:00   2016-03-01
68  2016-03-04 19:00:00   2016-03-01
69  2016-03-04 20:00:00   2016-03-01
70  2016-03-04 21:00:00   2016-03-01
71  2016-03-04 22:00:00   2016-03-01
72  2016-03-04 23:00:00   2016-03-01
73  2016-03-05 00:00:00   2016-03-01
74  2016-03-05 01:00:00   2016-03-01
75  2016-03-05 02:00:00   2016-03-01
76  2016-03-05 03:00:00   2016-03-01
77  2016-03-05 04:00:00   2016-03-01
78  2016-03-05 05:00:00   2016-03-01
79  2016-03-05 06:00:00   2016-03-01
80  2016-03-05 07:00:00   2016-03-01
81  2016-03-05 08:00:00   2016-03-01
82  2016-03-05 09:00:00   2016-03-01
83  2016-03-05 10:00:00   2016-03-01
84  2016-03-05 11:00:00   2016-03-01
85  2016-03-05 12:00:00   2016-03-01
86  2016-03-05 13:00:00   2016-03-01
87  2016-03-05 14:00:00   2016-03-01
88  2016-03-05 15:00:00   2016-03-01
89  2016-03-05 16:00:00   2016-03-01
90  2016-03-05 17:00:00   2016-03-01
91  2016-03-05 18:00:00   2016-03-01
92  2016-03-05 19:00:00   2016-03-01
93  2016-03-05 20:00:00   2016-03-01
94  2016-03-05 21:00:00   2016-03-01
95  2016-03-05 22:00:00   2016-03-01
96  2016-03-05 23:00:00   2016-03-01
97  2016-03-06 00:00:00   2016-03-01
98  2016-03-06 01:00:00   2016-03-01
99  2016-03-06 02:00:00   2016-03-01
100 2016-03-06 03:00:00   2016-03-01
101 2016-03-06 04:00:00   2016-03-01
102 2016-03-06 05:00:00   2016-03-01
103 2016-03-06 06:00:00   2016-03-01
104 2016-03-06 07:00:00   2016-03-01
105 2016-03-06 08:00:00   2016-03-01
106 2016-03-06 09:00:00   2016-03-01
107 2016-03-06 10:00:00   2016-03-01
108 2016-03-06 11:00:00   2016-03-01
109 2016-03-06 12:00:00   2016-03-01
110 2016-03-06 13:00:00   2016-03-01
111 2016-03-06 14:00:00   2016-03-01
112 2016-03-06 15:00:00   2016-03-01
113 2016-03-06 16:00:00   2016-03-01
114 2016-03-06 17:00:00   2016-03-01
115 2016-03-06 18:00:00   2016-03-01
116 2016-03-06 19:00:00   2016-03-01
117 2016-03-06 20:00:00   2016-03-01
118 2016-03-06 21:00:00   2016-03-01
119 2016-03-06 22:00:00   2016-03-01
120 2016-03-06 23:00:00   2016-03-01
121 2016-03-07 00:00:00   2016-03-01
122 2016-03-07 01:00:00   2016-03-01
123 2016-03-07 02:00:00   2016-03-01
124 2016-03-07 03:00:00   2016-03-01
125 2016-03-07 04:00:00   2016-03-01
126 2016-03-07 05:00:00   2016-03-01
127 2016-03-07 06:00:00   2016-03-01
128 2016-03-07 07:00:00   2016-03-01
129 2016-03-07 08:00:00   2016-03-01
130 2016-03-07 09:00:00   2016-03-01
131 2016-03-07 10:00:00   2016-03-01
132 2016-03-07 11:00:00   2016-03-01
133 2016-03-07 12:00:00   2016-03-01
134 2016-03-07 13:00:00   2016-03-01
135 2016-03-07 14:00:00   2016-03-01
136 2016-03-07 15:00:00   2016-03-01
137 2016-03-07 16:00:00   2016-03-01
138 2016-03-07 17:00:00   2016-03-01
139 2016-03-07 18:00:00   2016-03-01
140 2016-03-07 19:00:00   2016-03-01
141 2016-03-07 20:00:00   2016-03-01
142 2016-03-07 21:00:00   2016-03-01
143 2016-03-07 22:00:00   2016-03-01
144 2016-03-07 23:00:00   2016-03-01
145 2016-03-08 00:00:00   2016-03-01
146 2016-03-08 01:00:00   2016-03-01
147 2016-03-08 02:00:00   2016-03-01
148 2016-03-08 03:00:00   2016-03-01
149 2016-03-08 04:00:00   2016-03-01
150 2016-03-08 05:00:00   2016-03-01
151 2016-03-08 06:00:00   2016-03-01
152 2016-03-08 07:00:00   2016-03-01
153 2016-03-08 08:00:00   2016-03-01
154 2016-03-08 09:00:00   2016-03-01
155 2016-03-08 10:00:00   2016-03-01
156 2016-03-08 11:00:00   2016-03-01
157 2016-03-08 12:00:00   2016-03-01
158 2016-03-08 13:00:00   2016-03-01
159 2016-03-08 14:00:00   2016-03-01
160 2016-03-08 15:00:00   2016-03-01
161 2016-03-08 16:00:00   2016-03-01
162 2016-03-08 17:00:00   2016-03-01
163 2016-03-08 18:00:00   2016-03-01
164 2016-03-08 19:00:00   2016-03-01
165 2016-03-08 20:00:00   2016-03-01
166 2016-03-08 21:00:00   2016-03-01
167 2016-03-08 22:00:00   2016-03-01
168 2016-03-08 23:00:00   2016-03-01
169 2016-03-09 00:00:00   2016-03-01
170 2016-03-09 01:00:00   2016-03-01
171 2016-03-09 02:00:00   2016-03-01
172 2016-03-09 03:00:00   2016-03-01
173 2016-03-09 04:00:00   2016-03-01
174 2016-03-09 05:00:00   2016-03-01
175 2016-03-09 06:00:00   2016-03-01
176 2016-03-09 07:00:00   2016-03-01
177 2016-03-09 08:00:00   2016-03-01
178 2016-03-09 09:00:00   2016-03-01
179 2016-03-09 10:00:00   2016-03-01
180 2016-03-09 11:00:00   2016-03-01
181 2016-03-09 12:00:00   2016-03-01
182 2016-03-09 13:00:00   2016-03-01
183 2016-03-09 14:00:00   2016-03-01
184 2016-03-09 15:00:00   2016-03-01
185 2016-03-09 16:00:00   2016-03-01
186 2016-03-09 17:00:00   2016-03-01
187 2016-03-09 18:00:00   2016-03-01
188 2016-03-09 19:00:00   2016-03-01
189 2016-03-09 20:00:00   2016-03-01
190 2016-03-09 21:00:00   2016-03-01
191 2016-03-09 22:00:00   2016-03-01
192 2016-03-09 23:00:00   2016-03-01
193 2016-03-10 00:00:00   2016-03-01
194 2016-03-10 01:00:00   2016-03-01
195 2016-03-10 02:00:00   2016-03-01
196 2016-03-10 03:00:00   2016-03-01
197 2016-03-10 04:00:00   2016-03-01
198 2016-03-10 05:00:00   2016-03-01
199 2016-03-10 06:00:00   2016-03-01
200 2016-03-10 07:00:00   2016-03-01
> thicken(some_df, start_val = lubridate::ymd_hms('20160301 120000'))
                 x_hour          x_hour_day
1   2016-03-02 00:00:00 2016-03-01 12:00:00
2   2016-03-02 01:00:00 2016-03-01 12:00:00
3   2016-03-02 02:00:00 2016-03-01 12:00:00
4   2016-03-02 03:00:00 2016-03-01 12:00:00
5   2016-03-02 04:00:00 2016-03-01 12:00:00
6   2016-03-02 05:00:00 2016-03-01 12:00:00
7   2016-03-02 06:00:00 2016-03-01 12:00:00
8   2016-03-02 07:00:00 2016-03-01 12:00:00
9   2016-03-02 08:00:00 2016-03-01 12:00:00
10  2016-03-02 09:00:00 2016-03-01 12:00:00
11  2016-03-02 10:00:00 2016-03-01 12:00:00
12  2016-03-02 11:00:00 2016-03-01 12:00:00
13  2016-03-02 12:00:00 2016-03-02 12:00:00
14  2016-03-02 13:00:00 2016-03-02 12:00:00
15  2016-03-02 14:00:00 2016-03-02 12:00:00
16  2016-03-02 15:00:00 2016-03-02 12:00:00
17  2016-03-02 16:00:00 2016-03-02 12:00:00
18  2016-03-02 17:00:00 2016-03-02 12:00:00
19  2016-03-02 18:00:00 2016-03-02 12:00:00
20  2016-03-02 19:00:00 2016-03-02 12:00:00
21  2016-03-02 20:00:00 2016-03-02 12:00:00
22  2016-03-02 21:00:00 2016-03-02 12:00:00
23  2016-03-02 22:00:00 2016-03-02 12:00:00
24  2016-03-02 23:00:00 2016-03-02 12:00:00
25  2016-03-03 00:00:00 2016-03-02 12:00:00
26  2016-03-03 01:00:00 2016-03-02 12:00:00
27  2016-03-03 02:00:00 2016-03-02 12:00:00
28  2016-03-03 03:00:00 2016-03-02 12:00:00
29  2016-03-03 04:00:00 2016-03-02 12:00:00
30  2016-03-03 05:00:00 2016-03-02 12:00:00
31  2016-03-03 06:00:00 2016-03-02 12:00:00
32  2016-03-03 07:00:00 2016-03-02 12:00:00
33  2016-03-03 08:00:00 2016-03-02 12:00:00
34  2016-03-03 09:00:00 2016-03-02 12:00:00
35  2016-03-03 10:00:00 2016-03-02 12:00:00
36  2016-03-03 11:00:00 2016-03-02 12:00:00
37  2016-03-03 12:00:00 2016-03-03 12:00:00
38  2016-03-03 13:00:00 2016-03-03 12:00:00
39  2016-03-03 14:00:00 2016-03-03 12:00:00
40  2016-03-03 15:00:00 2016-03-03 12:00:00
41  2016-03-03 16:00:00 2016-03-03 12:00:00
42  2016-03-03 17:00:00 2016-03-03 12:00:00
43  2016-03-03 18:00:00 2016-03-03 12:00:00
44  2016-03-03 19:00:00 2016-03-03 12:00:00
45  2016-03-03 20:00:00 2016-03-03 12:00:00
46  2016-03-03 21:00:00 2016-03-03 12:00:00
47  2016-03-03 22:00:00 2016-03-03 12:00:00
48  2016-03-03 23:00:00 2016-03-03 12:00:00
49  2016-03-04 00:00:00 2016-03-03 12:00:00
50  2016-03-04 01:00:00 2016-03-03 12:00:00
51  2016-03-04 02:00:00 2016-03-03 12:00:00
52  2016-03-04 03:00:00 2016-03-03 12:00:00
53  2016-03-04 04:00:00 2016-03-03 12:00:00
54  2016-03-04 05:00:00 2016-03-03 12:00:00
55  2016-03-04 06:00:00 2016-03-03 12:00:00
56  2016-03-04 07:00:00 2016-03-03 12:00:00
57  2016-03-04 08:00:00 2016-03-03 12:00:00
58  2016-03-04 09:00:00 2016-03-03 12:00:00
59  2016-03-04 10:00:00 2016-03-03 12:00:00
60  2016-03-04 11:00:00 2016-03-03 12:00:00
61  2016-03-04 12:00:00 2016-03-04 12:00:00
62  2016-03-04 13:00:00 2016-03-04 12:00:00
63  2016-03-04 14:00:00 2016-03-04 12:00:00
64  2016-03-04 15:00:00 2016-03-04 12:00:00
65  2016-03-04 16:00:00 2016-03-04 12:00:00
66  2016-03-04 17:00:00 2016-03-04 12:00:00
67  2016-03-04 18:00:00 2016-03-04 12:00:00
68  2016-03-04 19:00:00 2016-03-04 12:00:00
69  2016-03-04 20:00:00 2016-03-04 12:00:00
70  2016-03-04 21:00:00 2016-03-04 12:00:00
71  2016-03-04 22:00:00 2016-03-04 12:00:00
72  2016-03-04 23:00:00 2016-03-04 12:00:00
73  2016-03-05 00:00:00 2016-03-04 12:00:00
74  2016-03-05 01:00:00 2016-03-04 12:00:00
75  2016-03-05 02:00:00 2016-03-04 12:00:00
76  2016-03-05 03:00:00 2016-03-04 12:00:00
77  2016-03-05 04:00:00 2016-03-04 12:00:00
78  2016-03-05 05:00:00 2016-03-04 12:00:00
79  2016-03-05 06:00:00 2016-03-04 12:00:00
80  2016-03-05 07:00:00 2016-03-04 12:00:00
81  2016-03-05 08:00:00 2016-03-04 12:00:00
82  2016-03-05 09:00:00 2016-03-04 12:00:00
83  2016-03-05 10:00:00 2016-03-04 12:00:00
84  2016-03-05 11:00:00 2016-03-04 12:00:00
85  2016-03-05 12:00:00 2016-03-05 12:00:00
86  2016-03-05 13:00:00 2016-03-05 12:00:00
87  2016-03-05 14:00:00 2016-03-05 12:00:00
88  2016-03-05 15:00:00 2016-03-05 12:00:00
89  2016-03-05 16:00:00 2016-03-05 12:00:00
90  2016-03-05 17:00:00 2016-03-05 12:00:00
91  2016-03-05 18:00:00 2016-03-05 12:00:00
92  2016-03-05 19:00:00 2016-03-05 12:00:00
93  2016-03-05 20:00:00 2016-03-05 12:00:00
94  2016-03-05 21:00:00 2016-03-05 12:00:00
95  2016-03-05 22:00:00 2016-03-05 12:00:00
96  2016-03-05 23:00:00 2016-03-05 12:00:00
97  2016-03-06 00:00:00 2016-03-05 12:00:00
98  2016-03-06 01:00:00 2016-03-05 12:00:00
99  2016-03-06 02:00:00 2016-03-05 12:00:00
100 2016-03-06 03:00:00 2016-03-05 12:00:00
101 2016-03-06 04:00:00 2016-03-05 12:00:00
102 2016-03-06 05:00:00 2016-03-05 12:00:00
103 2016-03-06 06:00:00 2016-03-05 12:00:00
104 2016-03-06 07:00:00 2016-03-05 12:00:00
105 2016-03-06 08:00:00 2016-03-05 12:00:00
106 2016-03-06 09:00:00 2016-03-05 12:00:00
107 2016-03-06 10:00:00 2016-03-05 12:00:00
108 2016-03-06 11:00:00 2016-03-05 12:00:00
109 2016-03-06 12:00:00 2016-03-06 12:00:00
110 2016-03-06 13:00:00 2016-03-06 12:00:00
111 2016-03-06 14:00:00 2016-03-06 12:00:00
112 2016-03-06 15:00:00 2016-03-06 12:00:00
113 2016-03-06 16:00:00 2016-03-06 12:00:00
114 2016-03-06 17:00:00 2016-03-06 12:00:00
115 2016-03-06 18:00:00 2016-03-06 12:00:00
116 2016-03-06 19:00:00 2016-03-06 12:00:00
117 2016-03-06 20:00:00 2016-03-06 12:00:00
118 2016-03-06 21:00:00 2016-03-06 12:00:00
119 2016-03-06 22:00:00 2016-03-06 12:00:00
120 2016-03-06 23:00:00 2016-03-06 12:00:00
121 2016-03-07 00:00:00 2016-03-06 12:00:00
122 2016-03-07 01:00:00 2016-03-06 12:00:00
123 2016-03-07 02:00:00 2016-03-06 12:00:00
124 2016-03-07 03:00:00 2016-03-06 12:00:00
125 2016-03-07 04:00:00 2016-03-06 12:00:00
126 2016-03-07 05:00:00 2016-03-06 12:00:00
127 2016-03-07 06:00:00 2016-03-06 12:00:00
128 2016-03-07 07:00:00 2016-03-06 12:00:00
129 2016-03-07 08:00:00 2016-03-06 12:00:00
130 2016-03-07 09:00:00 2016-03-06 12:00:00
131 2016-03-07 10:00:00 2016-03-06 12:00:00
132 2016-03-07 11:00:00 2016-03-06 12:00:00
133 2016-03-07 12:00:00 2016-03-07 12:00:00
134 2016-03-07 13:00:00 2016-03-07 12:00:00
135 2016-03-07 14:00:00 2016-03-07 12:00:00
136 2016-03-07 15:00:00 2016-03-07 12:00:00
137 2016-03-07 16:00:00 2016-03-07 12:00:00
138 2016-03-07 17:00:00 2016-03-07 12:00:00
139 2016-03-07 18:00:00 2016-03-07 12:00:00
140 2016-03-07 19:00:00 2016-03-07 12:00:00
141 2016-03-07 20:00:00 2016-03-07 12:00:00
142 2016-03-07 21:00:00 2016-03-07 12:00:00
143 2016-03-07 22:00:00 2016-03-07 12:00:00
144 2016-03-07 23:00:00 2016-03-07 12:00:00
145 2016-03-08 00:00:00 2016-03-07 12:00:00
146 2016-03-08 01:00:00 2016-03-07 12:00:00
147 2016-03-08 02:00:00 2016-03-07 12:00:00
148 2016-03-08 03:00:00 2016-03-07 12:00:00
149 2016-03-08 04:00:00 2016-03-07 12:00:00
150 2016-03-08 05:00:00 2016-03-07 12:00:00
151 2016-03-08 06:00:00 2016-03-07 12:00:00
152 2016-03-08 07:00:00 2016-03-07 12:00:00
153 2016-03-08 08:00:00 2016-03-07 12:00:00
154 2016-03-08 09:00:00 2016-03-07 12:00:00
155 2016-03-08 10:00:00 2016-03-07 12:00:00
156 2016-03-08 11:00:00 2016-03-07 12:00:00
157 2016-03-08 12:00:00 2016-03-08 12:00:00
158 2016-03-08 13:00:00 2016-03-08 12:00:00
159 2016-03-08 14:00:00 2016-03-08 12:00:00
160 2016-03-08 15:00:00 2016-03-08 12:00:00
161 2016-03-08 16:00:00 2016-03-08 12:00:00
162 2016-03-08 17:00:00 2016-03-08 12:00:00
163 2016-03-08 18:00:00 2016-03-08 12:00:00
164 2016-03-08 19:00:00 2016-03-08 12:00:00
165 2016-03-08 20:00:00 2016-03-08 12:00:00
166 2016-03-08 21:00:00 2016-03-08 12:00:00
167 2016-03-08 22:00:00 2016-03-08 12:00:00
168 2016-03-08 23:00:00 2016-03-08 12:00:00
169 2016-03-09 00:00:00 2016-03-08 12:00:00
170 2016-03-09 01:00:00 2016-03-08 12:00:00
171 2016-03-09 02:00:00 2016-03-08 12:00:00
172 2016-03-09 03:00:00 2016-03-08 12:00:00
173 2016-03-09 04:00:00 2016-03-08 12:00:00
174 2016-03-09 05:00:00 2016-03-08 12:00:00
175 2016-03-09 06:00:00 2016-03-08 12:00:00
176 2016-03-09 07:00:00 2016-03-08 12:00:00
177 2016-03-09 08:00:00 2016-03-08 12:00:00
178 2016-03-09 09:00:00 2016-03-08 12:00:00
179 2016-03-09 10:00:00 2016-03-08 12:00:00
180 2016-03-09 11:00:00 2016-03-08 12:00:00
181 2016-03-09 12:00:00 2016-03-09 12:00:00
182 2016-03-09 13:00:00 2016-03-09 12:00:00
183 2016-03-09 14:00:00 2016-03-09 12:00:00
184 2016-03-09 15:00:00 2016-03-09 12:00:00
185 2016-03-09 16:00:00 2016-03-09 12:00:00
186 2016-03-09 17:00:00 2016-03-09 12:00:00
187 2016-03-09 18:00:00 2016-03-09 12:00:00
188 2016-03-09 19:00:00 2016-03-09 12:00:00
189 2016-03-09 20:00:00 2016-03-09 12:00:00
190 2016-03-09 21:00:00 2016-03-09 12:00:00
191 2016-03-09 22:00:00 2016-03-09 12:00:00
192 2016-03-09 23:00:00 2016-03-09 12:00:00
193 2016-03-10 00:00:00 2016-03-09 12:00:00
194 2016-03-10 01:00:00 2016-03-09 12:00:00
195 2016-03-10 02:00:00 2016-03-09 12:00:00
196 2016-03-10 03:00:00 2016-03-09 12:00:00
197 2016-03-10 04:00:00 2016-03-09 12:00:00
198 2016-03-10 05:00:00 2016-03-09 12:00:00
199 2016-03-10 06:00:00 2016-03-09 12:00:00
200 2016-03-10 07:00:00 2016-03-09 12:00:00
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> x_df <- data.frame(
+   x = seq(lubridate::ymd(20130101), by = 'day', length.out = 1000) %>%
+     sample(500),
+   y = runif(500, 10, 50) %>% round) %>%
+   arrange(x)
> 
> # get the max per month
> x_df %>% thicken('month') %>% group_by(x_month) %>%
+   summarise(y_max = max(y))
# A tibble: 33 × 2
      x_month y_max
       <date> <dbl>
1  2013-01-01    50
2  2013-02-01    47
3  2013-03-01    46
4  2013-04-01    43
5  2013-05-01    41
6  2013-06-01    47
7  2013-07-01    49
8  2013-08-01    48
9  2013-09-01    50
10 2013-10-01    48
# ... with 23 more rows
> 
> # get the average per week, but you want your week to start on Mondays
> # instead of Sundays
> min_x <- x_df$x %>% min
> weekdays(min_x)
[1] "Tuesday"
> x_df %>% thicken(start_val = min_x - 1) %>%
+   group_by(x_week) %>% summarise(y_avg = mean(y))
# A tibble: 142 × 2
       x_week    y_avg
       <date>    <dbl>
1  2012-12-31 19.00000
2  2013-01-07 19.50000
3  2013-01-14 42.00000
4  2013-01-21 38.00000
5  2013-01-28 24.33333
6  2013-02-04 40.33333
7  2013-02-11 34.00000
8  2013-02-18 31.00000
9  2013-02-25 39.00000
10 2013-03-04 40.33333
# ... with 132 more rows
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.523 0.03 0.553 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
